% start file
% syntax file
% indent INDENT
% dedent DEDENT

  file = stmt
% skip
  file = stmt file

  decorator  = '@' dotted_name '\n' \
              | '@' dotted_name '(' ')\n' \
			  | '@' dotted_name '(' arglist ')\n'
  decorators = decorator | decorator decorators
  decorated  = decorators classdef | decorators funcdef | decorators async_funcdef

  async_funcdef = 'async' funcdef
  funcdef = 'def' NAME parameters '->' test ':' MAYBE_TYPE_COMMENT func_body_suite
  funcdef = 'def' NAME parameters ':' MAYBE_TYPE_COMMENT func_body_suite

  parameters = '(' ')' | '(' typedargslist ')'
  typedargslist = tfpdef '=' test | tfpdef '=' test ',' typedargslist
  
 ########################################################################
 
  arguments = argument | MAYBE_TYPE_COMMENT argument ',' arguments
  argument  = tfpdef '=' test
  kwargs    = '**' tfpdef | '**' tfpdef ',' | '**' tfpdef ',' TYPE_COMMENT | '**' tfpdef TYPE_COMMENT
  args      = '*' | '*' tfpdef
  kwonly_kwargs = ',' MAYBE_TYPE_COMMENT argument kwonly_kwargs | TYPE_COMMENT | ',' MAYBE_TYPE_COMMENT | ',' MAYBE_TYPE_COMMENT kwargs
  args_kwonly_kwargs = args kwonly_kwargs | args | kwargs
  poskeyword_args_kwonly_kwargs = arguments TYPE_COMMENT \
                                  | arguments \
                                  | arguments ',' MAYBE_TYPE_COMMENT \
								  | arguments ',' MAYBE_TYPE_COMMENT args_kwonly_kwargs
  typedargslist_no_posonly  = poskeyword_args_kwonly_kwargs | args_kwonly_kwargs
  typedarglist = typedargslist_no_posonly \
                | arguments ',' MAYBE_TYPE_COMMENT '/' \
				| arguments ',' MAYBE_TYPE_COMMENT '/' ',' \
				| arguments ',' MAYBE_TYPE_COMMENT '/' ',' MAYBE_TYPE_COMMENT typedargslist_no_posonly

  tfpdef = NAME | NAME ':' test

 ########################################################################

  arguments1    = argument1 | argument1 ',' arguments1
  argument1     = NAME | NAME '=' test
  kwargs1       = '**' NAME | '**' NAME ','
  args1         = '*' | '*' NAME
  kwonly_kwargs1 = ',' | ',' kwargs1 | ',' argument1 kwonly_kwargs1
  args_kwonly_kwargs1 = args1 kwonly_kwargs1 | kwargs1 | args1
  poskeyword_args_kwonly_kwargs1 = arguments1 | arguments1 ',' | arguments1 ',' args_kwonly_kwargs1
  vararglist_no_posonly = poskeyword_args_kwonly_kwargs1 | args_kwonly_kwargs1
  varargslist = arguments1 ',' '/' \
               | arguments1 ',' '/' ',' \
			   | arguments1 ',' '/' ',' vararglist_no_posonly \
			   | vararglist_no_posonly

 ########################################################################

  stmt = simple_stmt | compound_stmt
  #simple_stmt = small_stmt ';' simple_stmt | small_stmt '\n'
  simple_stmt = small_stmt '\n'
  small_stmt  = expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | nonlocal_stmt | assert_stmt
  expr_stmt   = testlist_star_expr \
               | testlist_star_expr '=' yield_expr MAYBE_TYPE_COMMENT \
			   | testlist_star_expr '=' testlist_star_expr MAYBE_TYPE_COMMENT \
			   | testlist_star_expr annassign \
			   | testlist_star_expr augassign yield_expr \
			   | testlist_star_expr augassign testlist 
  annassign   = ':' test | test '=' yield_expr | test '=' testlist_star_expr
  testlist_star_expr = test | test ',' | star_expr | star_expr ',' | test ',' testlist_star_expr | star_expr ',' testlist_star_expr
  augassign   = '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='

 # For normal and annotated assignments, additional restrictions enforced by the interpreter
  del_stmt      = 'del' exprlist
  pass_stmt     = 'pass'
  flow_stmt     = break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
  break_stmt    = 'break'
  continue_stmt = 'continue'
  return_stmt   = 'return' | 'return' testlist_star_expr
  yield_stmt    = yield_expr
  raise_stmt    = 'raise' | 'raise' test | 'raise' test 'from' test
  import_stmt   = import_name | import_from
  import_name   = 'import' dotted_as_names
  
 # note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
  import_from     = 'from' dotted_name 'import' '*' \
                   | 'from' dotted_name 'import' '(' import_as_names ')' \
			       | 'from' dotted_name 'import' import_as_names
  import_as_name  = NAME | NAME 'as' NAME
  dotted_as_name  = dotted_name | dotted_name 'as' NAME
  import_as_names = import_as_name | import_as_name ',' | import_as_name ',' import_as_names
  dotted_as_names = dotted_as_name | dotted_as_names ',' dotted_as_name
  dotted_name     = NAME | dotted_name '.' NAME
  global_stmt     = 'global' NAME | global_stmt ',' NAME
  nonlocal_stmt   = 'nonlocal' NAME | nonlocal_stmt ',' NAME
  assert_stmt     = 'assert' test | 'assert' test ',' test

  compound_stmt   = if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
  async_stmt      = ASYNC funcdef | ASYNC with_stmt | ASYNC for_stmt
  if_stmt_noelse  = 'if' namedexpr_test ':' suite | if_stmt_noelse 'elif' namedexpr_test ':' suite
  if_stmt         = if_stmt_noelse | if_stmt_noelse 'else' ':' suite
  while_stmt      = 'while' namedexpr_test ':' suite \
                   | 'while' namedexpr_test ':' suite 'else' ':' suite
  for_stmt        = 'for' exprlist 'in' testlist ':' MAYBE_TYPE_COMMENT suite \
                   | 'for' exprlist 'in' testlist ':' MAYBE_TYPE_COMMENT suite 'else' ':' suite
  try_stmt        = 'try' ':' suite 'finally' ':' suite \
                   | 'try' ':' suite excepts \
				   | 'try' ':' suite excepts 'else' ':' suite \
				   | 'try' ':' suite excepts 'else' ':' suite 'finally' ':' suite \
				   | 'try' ':' suite excepts 'finally' ':' suite
  excepts         = except_clause ':' suite | excepts except_clause ':' suite
  with_items      = with_item | with_items ',' with_item
  with_stmt       = 'with' with_items ':' MAYBE_TYPE_COMMENT suite
  with_item       = test | test 'as' expr

  except_clause   = 'except' | 'except' test | 'except' test 'as' NAME
  
% skip
  stmts1          = stmt | stmts1 stmt
  
  suite           = '\n' INDENT simple_stmt DEDENT | '\n' INDENT stmts1 DEDENT

  namedexpr_test  = test | test ':=' test
  test            = or_test | or_test 'if' or_test 'else' test | lambdef
  test_nocond     = or_test | lambdef_nocond
  lambdef         = 'lambda' ':' test | 'lambda' varargslist ':' test
  lambdef_nocond  = 'lambda' ':' test_nocond | 'lambda' varargslist ':' test_nocond
  or_test         = and_test | or_test 'or' and_test
  and_test        = not_test | and_test 'and' not_test
  not_test        = 'not' not_test | comparison
  comparison      = expr | comparison comp_op expr
 # <> isn't actually a valid comparison operator in Python. It's here for the
 # sake of a __future__ import described in PEP 401 (which really works :-)
  comp_op         = '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
  star_expr       = '*' expr
  expr            = xor_expr | expr '|' xor_expr
  xor_expr        = and_expr | xor_expr '^' and_expr
  and_expr        = shift_expr | and_expr '&' shift_expr
  shift_expr      = arith_expr | shift_expr '<<' arith_expr | shift_expr '>>' arith_expr
  arith_expr      = term | arith_expr '+' term | arith_expr '-' term
  term            = factor | term '*' factor | term '@' factor | term '/' factor | term '%' factor | term '//' factor
  factor          = '+' factor | '-' factor | '~' factor | power
  power           = atom_expr | atom_expr '**' factor
  atom_expr       = atom | atom_expr trailer
  atom            = '(' ')' | '(' yield_expr ')' | '(' testlist_comp ')' \
                   | '[' ']' | '[' testlist_comp ']' \
				   | '{' '}' | '{' dictorsetmaker '}' \
				   | NAME | NUMBER | STRINGS | '...' | 'None' | 'True' | 'False'
  named_or_star   = namedexpr_test | star_expr
  testlist_comp   = named_or_star comp_for \
                   | named_or_star comp_for ',' \
                   | named_or_star ',' testlist_comp

  trailer         = '(' ')' | '(' arglist ')' | '[' subscriptlist ']' | '.' NAME
  subscriptlist   = subscript | subscript ',' | subscript ',' subscriptlist
  subscript       = test | ':' | test ':' | ':' sliceop | test ':' sliceop
  sliceop         = ':' | test ':' | ':' test | test ':' test
  exprlist        = expr | star_expr | expr ',' | star_expr ',' \
                   | expr ',' exprlist | star_expr ',' exprlist
  testlist        = test | test ',' | test ',' testlist
  ds1   = test ':' test | '**' expr 
  ds2   = ds1 | ds2 ',' ds1 
  dictmaker   = ds2 | ds1 comp_for
  ds4   = test | star_expr
  ds5   = ds4 | ds5 ',' ds4
  setmaker    = ds5 | ds4 comp_for
  dictorsetmaker  = dictmaker | setmaker

  classdef        = 'class' NAME ':' suite \
                   | 'class' NAME '(' ')' ':' suite \
				   | 'class' NAME '(' arglist ')' ':' suite

  arglist         = argument2 | argument2 ',' | argument2 ',' arglist

# The reason that keywords are test nodes instead of NAME is that using NAME
# results in an ambiguity. ast.c makes sure it's a NAME.
# "test '=' test" is really "keyword '=' test", but we have no such token.
# These need to be in a single rule to avoid grammar that is ambiguous
# to our LL(1) parser. Even though 'test' includes '*expr' in star_expr,
# we explicitly match '*' here, too, to give it proper precedence.
# Illegal combinations and orderings are blocked in ast.c:
# multiple (test comp_for) arguments are blocked; keyword unpackings
# that precede iterable unpackings are blocked; etc.
  argument2 = test | test comp_for \
             | test ':=' test \
			 | test '=' test \
			 | '**' test \
			 | '*' test 

  comp_iter      = comp_for | comp_if
  sync_comp_for  = 'for' exprlist 'in' or_test | 'for' exprlist 'in' or_test comp_iter
  comp_for       = ASYNC sync_comp_for | sync_comp_for
  comp_if        = 'if' test_nocond | 'if' test_nocond comp_iter

# not used in grammar, but may appear in "node" passed from Parser to Compiler
  encoding_decl  = NAME

  yield_expr     = 'yield' | 'yield' yield_arg
  yield_arg      = 'from' test | testlist_star_expr

# the TYPE_COMMENT in suites is only parsed for funcdefs,
# but can't go elsewhere due to ambiguity
  func_body_suite = simple_stmt \
                   | '\n' INDENT stmts1 DEDENT '\n' \
				   | '\n' TYPE_COMMENT '\n' INDENT stmts1 DEDENT '\n'

  TYPE_COMMENT = '""" Some comment """'
  MAYBE_TYPE_COMMENT = TYPE_COMMENT | ' '
  NAME    = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' 
  NUMBER  = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 
  STRINGS = STRING | STRINGS STRING
  STRING  = '"Some text"'
  ASYNC = 'async'
  
